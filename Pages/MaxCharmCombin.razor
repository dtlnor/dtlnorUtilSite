@page "/maxCharmCombin"
@inject HttpClient Http
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Havit.Blazor.Components.Web
@using Havit.Blazor.Components.Web.Bootstrap

<h1>@Pagei18n.MaxCharmCombinTitle</h1>

@if (skillNameIDPair == null)
{
    <p><em>Loading...</em></p>
}
else
{
@*    <select class="form-control" @bind="SkillNameLang">
        @if (Global.LANGUAGE_NAME_LOOKUP != null)
        {
            @foreach (var cnt in Global.LANGUAGE_NAME_LOOKUP)
            {
                <option value="@cnt.Key">@cnt.Value</option>
            }
        }
    </select>
    <br />*@

    string i18nLangToCapcomLang(string inputLang)
    {
        switch (inputLang)
        {
            case "en": return "eng";
            case "zh-Hant": return "chT";
            case "zh-Hans": return "chS";
            case "ja": return "jpn";
            case "ko": return "kor";
            default: return "eng";
        }
    }

    nameLookUp = (skillNameIDPair[i18nLangToCapcomLang(Pagei18n.LangName)]).ToObject<Dictionary<int, string>>();
    nameLookUp[0] = ""; //set #Rejected# as null
    charmSkill = new Dictionary<int, string>();
   
@*    foreach (int i in charmSkill.Keys)
    {
        checkList.Add(i, false);  
    }*@
    foreach (var skill in skillMaxs)
    {
        charmSkill.Add(skill.SkillID, nameLookUp[skill.SkillID]);
    }

    @*@Pagei18n.LangName*@
        
    <div class="row">
        <label class="align-items-center align-content-center">
            <span>@Pagei18n.SkillButtonPrompt</span>
            <button type="button" class="btn btn-secondary" style="display:none;visibility=hidden;" disabled @onclick="OnAllSelect"></button>
            <button type="button" class="btn btn-secondary float-end" @onclick="OnClearAllSkill">@Pagei18n.ClearSelectedSkill</button>
        </label>

        <CheckList Data="@charmSkill"
                    TextField="@((item)=>item.Value)"
                    ValueField="@((item)=>item.Key)"
                    SelectedValues="@selectedIds" @ref="SkillCheckList"/>

    </div>

@*    <HxRepeater Data="charmSkill">
	    <HeaderTemplate>
		    <h1>Header</h1>
	    </HeaderTemplate>
	    <ItemTemplate Context="item">
            <label class="btn btn-outline-primary">
                <InputCheckbox @bind-Value="checkList[item.Key]" class="btn-check" />@item.Value
            </label>
	    </ItemTemplate>
	    <FooterTemplate>
		    <h2>Footer</h2>
	    </FooterTemplate>
	    <NullTemplate>
		    Loading...
	    </NullTemplate>
    </HxRepeater>

    @code
    {
	    private Dictionary<int, bool> checkList = new();
    }*@

    <div class="row mt-4">
        <label class="col">
            <span class="text-secondary">@Pagei18n.EffectiveSkillExplain</span>
        </label>

    </div>

    <div class="row mt-1">
        <label class="caption-top col-auto">
            @Pagei18n.MaxEffectiveSkillNumber
            <select class="form-control col-auto" @bind="MaxWeight">
                <option value=10>@(Pagei18n.MaxPossibleChoice)</option>
                <option value=3>@("3 "+Pagei18n.EffectiveSkill)</option>
                <option value=4>@("4 "+Pagei18n.EffectiveSkill)</option>
                <option value=5>@("5 "+Pagei18n.EffectiveSkill)</option>
                <option value=6>@("6 "+Pagei18n.EffectiveSkill)</option>
                <option value=7>@("7 "+Pagei18n.EffectiveSkill)</option>
                <option value=8>@("8 "+Pagei18n.EffectiveSkill)</option>
            </select>
        </label>

        <label class="caption-top col-auto">
            @Pagei18n.Lv4SlotWeight
            <select class="form-control col-auto" @bind="Lv4SlotWeight">
                <option value=1>@("1 "+Pagei18n.EffectiveSkill)</option>
                <option value=2>@("2 "+Pagei18n.EffectiveSkill)</option>
            </select>
        </label>
    </div>
        
    <div class="row my-4">
        <button class="form-control col-auto btn btn-primary" @onclick="OnShowCharmCombinations">@Pagei18n.ShowClickedCombinations</button>
    </div>

    <div class="row my-2">
        <label class="">@Pagei18n.Selected @selectedIds.Count() @Pagei18n.Skill :</label>
        <div class="col-auto my-2 border-bottom">
            <b>@OutPutValue</b>
        </div>
    </div>
        
    <div class="row">
        <div class="form-group">
            <label class="row my-2"><span class="col">@Pagei18n.GenedCharmPrompt</span></label>
            <label class="row my-2"><span class="col">@(CharmCount == string.Empty ? "" : $"{CharmCount} {Pagei18n.NumOfCharmGened}")</span></label>
            @for (int i = 0; i < CharmCombinText.Count; i++)
            {
                <b class="mt-2 col">
                    @( (i*MaxCharmInArmorSearch > int.Parse(CharmCount)) ? CharmCount : i * MaxCharmInArmorSearch+1) 
                    @Pagei18n.To 
                    @( ( (i+1)*MaxCharmInArmorSearch > int.Parse(CharmCount)) ? CharmCount : (i+1) * MaxCharmInArmorSearch)
                </b>
                <textarea class="form-control col mb-2" rows="5" @bind="@CharmCombinText[i]"></textarea>
            }
        </div>
    </div>
}

@code
{
    Dictionary<int, string> charmSkill;
    I18nText.MainPage Pagei18n = new I18nText.MainPage();

    protected override async Task OnInitializedAsync()
    {
        skillNameIDPair = JObject.Parse((await Http.GetFromJsonAsync<System.Text.Json.JsonElement>("skill-data/SKILL_NAME_LOOKUP.json")).GetRawText());
        skillMaxs = await Http.GetFromJsonAsync<SkillMax[]>("skill-data/SkillMax.json");
        slotMaxs = await Http.GetFromJsonAsync<SlotMax[]>("skill-data/SlotMax.json");
        decoBaseDatas = await Http.GetFromJsonAsync<DecoBaseData[]>("skill-data/DecoBaseData.json");
        ////skillBaseDatas = await Http.GetFromJsonAsync<SkillBaseData[]>("skill-data/SkillBaseData.json");
        Pagei18n = await I18nText.GetTextTableAsync<I18nText.MainPage>(this);

        if (await localStorage.ContainKeyAsync("SelectedValues"))
        {
            var selected = await localStorage.GetItemAsync<List<string>>("SelectedValues");
            selectedIds.Clear();
            selectedIds.UnionWith(selected);
        }
        else
        {
            await localStorage.SetItemAsync("SelectedValues",selectedIds.ToList());
        }
    }

    dynamic SkillCheckList;
    protected void OnClearAllSkill()
    {
        selectedIds.Clear();
        //SkillCheckList.SelectedValues.Clear();

        // not changing local storage
    }
    protected void OnAllSelect()
    {
        selectedIds.Clear();
        selectedIds.UnionWith(skillMaxs.Select(i => i.SkillID.ToString()));
    }

}