@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="top-row ps-4 navbar navbar-dark">
    <a class="navbar-brand col" href="">dtlnorUtilSite</a>
    <div class="col-auto">
	    <span class="oi oi-globe text-muted mt-1" aria-hidden="true"></span>
    </div>
    <div class="col-auto pe-1">
	    <select class="form-control form-control-sm float-end" @onchange="OnChangeCurrentLang">
	        <option value="en" selected="@(CurrentLang.Contains("en"))">English</option>
	        <option value="zh-Hans" selected="@(CurrentLang.Contains("zh-Hans"))">简体中文</option>
	        <option value="zh-Hant" selected="@(CurrentLang.Contains("zh-Hant"))">繁體中文</option>
	        <option value="ja" selected="@(CurrentLang.Contains("ja"))">日本語</option>
	        <option value="ko" selected="@(CurrentLang.Contains("ko"))">한국어</option>
	    </select>
    </div>

    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="floatingPoint">
                <span class="oi oi-plus" aria-hidden="true"></span> Floating point Converter
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="usefulSite">
                <span class="oi oi-compass" aria-hidden="true"></span> Useful Sites
            </NavLink>
        </li>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public string CurrentLang = "en";

    I18nText.MainPage Pagei18n = new I18nText.MainPage();

    protected override async Task OnInitializedAsync()
    {
        if (await localStorage.ContainKeyAsync("CurrentLang"))
        {
            var lang = await localStorage.GetItemAsync<string>("CurrentLang");
            CurrentLang = lang;
        }
        else
        {
            // use browser default
            var lang = await I18nText.GetCurrentLanguageAsync();

            if (new[] { "en", "ja", "zh", "ko" }.Contains(lang.Split('-')[0]))
            {
                if (lang.Contains("zh"))
                {
                    if (lang.ToLower().Contains("chs") || lang.ToLower().Contains("cn") || lang.ToLower().Contains("hans")){
                        CurrentLang = "zh-Hans";
                    }
                    else
                    {
                        CurrentLang = "zh-Hant";
                    }
                }
                else
                {
                    CurrentLang = lang;
                }
            }
            else
            {
                CurrentLang = "en";
            }
        }

        Pagei18n = await I18nText.GetTextTableAsync<I18nText.MainPage>(this);
        I18nText.ChangeLanguage += (s, a) =>
        {
            Console.WriteLine($"Language Changed: {a.LanguageCode}");
        };

        await I18nText.SetCurrentLanguageAsync(CurrentLang);
        await localStorage.SetItemAsync("CurrentLang",CurrentLang);

    }

    private async Task OnChangeCurrentLang(ChangeEventArgs args)
    {
        Console.WriteLine($"OnChange: {args.Value}");
        CurrentLang = args.Value as string;
        await I18nText.SetCurrentLanguageAsync(CurrentLang);
        await localStorage.SetItemAsync("CurrentLang",CurrentLang);
        StateHasChanged();
    }

}
